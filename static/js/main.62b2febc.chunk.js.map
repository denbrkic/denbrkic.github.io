{"version":3,"sources":["hoc/Wrapper/Wrapper.js","reducers/safeReducer.js","reducers/index.js","actions/types.js","store/configureStore.js","presentation/SerialNumber/SerialNumber.js","presentation/Status/Status.js","presentation/Indicator/Indicator.js","containers/Screen/Screen.js","presentation/Key/Key.js","containers/Keypad/Keypad.js","actions/safe.js","containers/Panel/Panel.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","componentName","children","initialState","states","id","indicator","status","currentStateId","currentIndicator","currentPassword","enteredMasterCode","serialNumber","currentScreenContents","keyInputDisabled","isMatch","isMasterCodeMatch","isDeviceOn","combineReducers","safe","state","action","type","dismissibleStatuses","currentInput","includes","payload","currentState","find","st","middleware","ReduxThunk","store","createStore","rootReducer","applyMiddleware","SerialNumber","sn","Status","text","Indicator","Screen","this","Component","connect","Key","onClick","cb","digit","Keypad","endInputTimeout","deviceTimeout","updateState","stateId","toggleKeys","onToggleKeyInput","onChangeState","onDisplayState","onKeyClickCallback","key","clearTimeout","onDeviceOn","length","isNaN","onUpdateScreenContents","onSetNewPassword","setTimeout","onVerifyPassword","a","onVerifyMasterPassword","dispatch","updateScreenContents","displayState","changeState","fetch","response","json","console","error","verifyMasterPassword","deviceOn","Panel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.62b2febc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Wrapper = (props) => {\n    return (\n        <div className={ props.componentName }>\n            { props.children }\n        </div>\n    )\n}\n\nexport default Wrapper;\n","import { \n    UPDATE_SCREEN_CONTENTS,\n    TOGGLE_KEY_INPUT,\n    SET_NEW_PASSWORD,\n    DISPLAY_STATE,\n    CHANGE_STATE,\n    VERIFY_PASSWORD,\n    VERIFY_MASTER_PASSWORD,\n    DEVICE_ON\n} from '../actions/types';\n\nconst initialState = {\n    states: [\n        {\n            id: 1,\n            indicator: 'Unlocked',\n            status: 'Ready'\n        },\n        {\n            id: 2,\n            indicator: 'Unlocked',\n            status: 'Locking...'\n        },\n        {\n            id: 3,\n            indicator: 'Locked',\n            status: ''\n        },\n        {\n            id: 4,\n            indicator: 'Locked',\n            status: 'Unlocking...'\n        },\n        {\n            id: 5,\n            indicator: 'Locked',\n            status: 'Error'\n        },\n        {\n            id: 6,\n            indicator: 'Locked',\n            status: 'Service'\n        },\n        {\n            id: 7,\n            indicator: 'Locked',\n            status: 'Validating...'\n        }\n    ],\n    currentStateId: 1,\n    currentIndicator: '',\n    currentPassword: '',\n    enteredMasterCode: '',\n    serialNumber: 4815162342,\n    currentScreenContents: '',\n    keyInputDisabled: false,\n    isMatch: false,\n    isMasterCodeMatch: false,\n    isDeviceOn: false\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE_SCREEN_CONTENTS:\n            const dismissibleStatuses = ['Ready', 'Service'];\n            const currentInput = dismissibleStatuses.includes(state.currentScreenContents) ? '' :  state.currentScreenContents;\n            return {\n                ...state,\n                currentScreenContents: currentInput + action.payload\n            };\n        case TOGGLE_KEY_INPUT:\n            return {\n                ...state,\n                keyInputDisabled: !state.keyInputDisabled\n            };\n        case SET_NEW_PASSWORD:\n            return {\n                ...state,\n                currentPassword: state.currentScreenContents\n            };\n        case DISPLAY_STATE:\n            const currentState = state.states.find(st => st.id === action.payload);\n            return {\n                ...state,\n                currentScreenContents: currentState.status,\n                currentIndicator: currentState.indicator\n            };\n        case CHANGE_STATE:\n            return {\n                ...state,\n                currentStateId: action.payload\n            };\n        case VERIFY_PASSWORD:\n            const isMatch = state.currentScreenContents === state.currentPassword;\n            return {\n                ...state,\n                isMatch\n            };\n        case VERIFY_MASTER_PASSWORD:\n            const isMasterCodeMatch = state.serialNumber === action.payload;\n            return {\n                ...state,\n                isMasterCodeMatch\n            };\n        case DEVICE_ON:\n            return {\n                ...state,\n                isDeviceOn: action.payload\n            };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport safeReducer from './safeReducer';\n\nexport default combineReducers({\n    safe: safeReducer,\n});\n","export const UPDATE_SCREEN_CONTENTS = 'UPDATE_SCREEN_CONTENTS';\nexport const TOGGLE_KEY_INPUT = 'TOGGLE_KEY_INPUT';\nexport const SET_NEW_PASSWORD = 'SET_NEW_PASSWORD';\nexport const VERIFY_PASSWORD = 'VERIFY_PASSWORD';\nexport const VERIFY_MASTER_PASSWORD = 'VERIFY_MASTER_PASSWORD';\nexport const CHANGE_STATE = 'CHANGE_STATE';\nexport const DISPLAY_STATE = 'DISPLAY_STATE';\nexport const DEVICE_ON = 'DEVICE_ON';\n","import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {};\n\nconst middleware = [ ReduxThunk ];\n\nconst store = createStore(\n    rootReducer,\n    initialState, \n    applyMiddleware(...middleware)\n);\n\nexport default store;\n","import React from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport './SerialNumber.scss';\n\nconst SerialNumber = (props) => {\n    return (\n        <Wrapper componentName=\"SerialNumber\">\n            <span className=\"SerialNumber--text\">S/N: { props.sn }</span>\n        </Wrapper>\n    )\n}\n\nexport default SerialNumber;\n","import React from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport './Status.scss';\n\nconst Status = (props) => {\n    return (\n        <Wrapper componentName=\"Status\">\n            <span>{ props.text }</span>\n        </Wrapper>\n    );\n}\n\nexport default Status;\n","import React from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport './Indicator.scss';\n\nconst Indicator = (props) => {\n    return (\n        <Wrapper componentName=\"Indicator\">\n            <span>{ props.text }</span>\n        </Wrapper>\n    );\n}\n\nexport default Indicator;\n","import React, { Component } from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport Status from '../../presentation/Status/Status';\nimport Indicator from '../../presentation/Indicator/Indicator';\nimport './Screen.scss';\nimport { connect } from 'react-redux';\n\nexport class Screen extends Component {\n    render() {\n        return (\n            <Wrapper componentName=\"Screen\">\n                <div id=\"screen-switch\" className={`Screen--switch ${this.props.isDeviceOn ? 'Screen--switch-on' : 'Screen--switch-off'}`}>\n                    <Indicator text={ this.props.currentIndicator } />\n                    <Status text={ this.props.currentScreenContents } />\n                </div>\n            </Wrapper>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentScreenContents: state.safe.currentScreenContents,\n    currentIndicator: state.safe.currentIndicator,\n    isDeviceOn: state.safe.isDeviceOn\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Screen);\n","import React from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport './Key.scss';\n\nconst Key = (props) => {\n    const onKeyClick = () => {\n        props.cb(props.digit);\n    }\n\n    return (\n        <Wrapper componentName=\"Key\">\n            <div className=\"Key--digit\" onClick={ onKeyClick }>\n                { props.digit }\n            </div>\n        </Wrapper>\n    )\n}\n\nexport default Key;\n","import React, { Component } from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport Key from '../../presentation/Key/Key';\nimport './Keypad.scss';\nimport { connect } from 'react-redux';\nimport {\n    updateScreenContents, \n    toggleKeyInput,\n    setNewPassword,\n    displayState,\n    changeState,\n    verifyPassword,\n    verifyMasterPassword,\n    deviceOn\n} from '../../actions/safe';\n\nexport class Keypad extends Component {\n\n    endInputTimeout = null;\n    deviceTimeout = null;\n\n    componentDidMount() {\n        this.props.onDisplayState(this.props.currentStateId);\n    }\n\n    updateState = (stateId, toggleKeys = true) => {\n        if (toggleKeys) {\n            this.props.onToggleKeyInput();\n        }\n        this.props.onChangeState(stateId);\n        this.props.onDisplayState(stateId);\n    }\n\n    onKeyClickCallback = (key) => {\n        if (this.deviceTimeout !== null) {\n            clearTimeout(this.deviceTimeout);\n        }\n\n        if (!this.props.isDeviceOn) {\n            this.props.onDeviceOn(true);\n        }\n        \n        if (this.props.keyInputDisabled === false) {\n            if (this.props.currentStateId === 1 && this.props.currentScreenContents.length < 6 && !isNaN(key)) {\n                // The panel is ready for password input\n                this.props.onUpdateScreenContents(key);\n            }\n\n            if (this.props.currentStateId === 1 && this.props.currentScreenContents.length === 6 && key === 'L') {\n                // Set the new password and lock the door\n                this.props.onSetNewPassword();\n                this.updateState(2);\n                // Start locking...\n                setTimeout(() => {\n                    this.updateState(3);\n                }, 3000);\n            }\n\n            if (this.props.currentStateId === 3 && this.props.currentScreenContents.length < 5 && !isNaN(key)) {\n                // Input your password to unlock\n                this.props.onUpdateScreenContents(key);\n            }\n\n            if (this.props.currentStateId === 3 && this.props.currentScreenContents.length === 5) {\n                // Verify the password\n                this.props.onUpdateScreenContents(key);\n                this.props.onToggleKeyInput();  // disable keys\n                setTimeout(() => {\n                    this.props.onVerifyPassword();\n                    if (this.props.isMatch) {\n                        // There is a match\n                        this.updateState(4, false);\n                        // Start unlocking...\n                        setTimeout(() => {\n                            this.updateState(1);\n                        }, 3000);\n                    } else {\n                        // No Match\n                        if (this.props.currentScreenContents === '000000') {\n                            // Enter service mode\n                            setTimeout(() => {\n                                this.updateState(6);\n                            }, 1200);\n                        } else {\n                            // Error\n                            this.updateState(5, false);\n                            // Go back to password verification\n                            setTimeout(() => {\n                                this.updateState(3);\n                            }, 1200);\n                        }\n                    }\n                }, 1200);\n            }\n\n            if (this.props.currentStateId === 6 && this.props.currentScreenContents.length <= 13) {\n                // Service mode\n                if (this.endInputTimeout !== null) {\n                    clearTimeout(this.endInputTimeout);\n                }\n                this.props.onUpdateScreenContents(key);\n\n                this.endInputTimeout = setTimeout(async () => {\n                    await this.props.onVerifyMasterPassword(this.props.currentScreenContents);\n                    this.updateState(7);                    \n                    \n                    setTimeout(() => {\n                        if (this.props.isMasterCodeMatch) {\n                            // There is a match\n                            this.updateState(4, false);\n                            // Start unlocking...\n                            setTimeout(() => {\n                                this.updateState(1);\n                            }, 3000);\n                        } else {\n                            // Error\n                            this.updateState(5, false);\n                            // Go back to password verification\n                            setTimeout(() => {\n                                this.updateState(3);\n                            }, 1200);\n                        }\n                    }, 1200);\n                }, 1200);\n            }\n        }\n\n        // Turn the device off after x seconds of inactivity...\n        this.deviceTimeout = setTimeout(() => {\n            this.props.onDeviceOn(false);\n        }, 15000);\n    }\n\n    render() {\n        return (\n            <Wrapper componentName=\"Keypad\">\n                \n                <div>\n                    <Key digit=\"7\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"8\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"9\" cb={this.onKeyClickCallback} />\n                </div>\n                <div>\n                    <Key digit=\"4\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"5\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"6\" cb={this.onKeyClickCallback} />\n                </div>\n                <div>\n                    <Key digit=\"1\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"2\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"3\" cb={this.onKeyClickCallback} />\n                </div>\n                <div>\n                    <Key digit=\"*\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"0\" cb={this.onKeyClickCallback} />\n                    <Key digit=\"L\" cb={this.onKeyClickCallback} />\n                </div>\n                \n            </Wrapper>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    currentStateId: state.safe.currentStateId,\n    currentScreenContents: state.safe.currentScreenContents,\n    keyInputDisabled: state.safe.keyInputDisabled,\n    isMatch: state.safe.isMatch,\n    isMasterCodeMatch: state.safe.isMasterCodeMatch,\n    isDeviceOn: state.safe.isDeviceOn\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onUpdateScreenContents: (payload) => dispatch(updateScreenContents(payload)),\n    onToggleKeyInput: () => dispatch(toggleKeyInput()),\n    onSetNewPassword: () => dispatch(setNewPassword()),\n    onDisplayState: (payload) => dispatch(displayState(payload)),\n    onChangeState: (payload) => dispatch(changeState(payload)),\n    onVerifyPassword: (payload) => dispatch(verifyPassword(payload)),\n    onVerifyMasterPassword: (payload) => dispatch(verifyMasterPassword(payload)),\n    onDeviceOn: (payload) => dispatch(deviceOn(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Keypad);\n","import { \n    UPDATE_SCREEN_CONTENTS,\n    SET_NEW_PASSWORD,\n    DISPLAY_STATE,\n    CHANGE_STATE,\n    VERIFY_PASSWORD,\n    TOGGLE_KEY_INPUT,\n    VERIFY_MASTER_PASSWORD,\n    DEVICE_ON\n} from './types';\n\nexport const updateScreenContents = (payload) => dispatch => {\n    dispatch({\n        type: UPDATE_SCREEN_CONTENTS,\n        payload\n    });\n}\n\nexport const toggleKeyInput = () => dispatch => {\n    dispatch({\n        type: TOGGLE_KEY_INPUT\n    });\n}\n\nexport const setNewPassword = () => dispatch => {\n    dispatch({\n        type: SET_NEW_PASSWORD\n    });\n}\n\nexport const displayState = (payload) => dispatch => {\n    dispatch({\n        type: DISPLAY_STATE,\n        payload\n    });\n}\n\nexport const changeState = (payload) => dispatch => {\n    dispatch({\n        type: CHANGE_STATE,\n        payload\n    });\n}\n\nexport const verifyPassword = () => dispatch => {\n    dispatch({\n        type: VERIFY_PASSWORD\n    });\n}\n\nexport const verifyMasterPassword = (payload) => async (dispatch) => {\n    try {\n        const response = await fetch(`https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=${payload}`);\n        const serialNumber = await response.json();\n        dispatch({\n            type: VERIFY_MASTER_PASSWORD,\n            payload: serialNumber.sn,\n        })\n    } catch (err) {\n        console.error('There is a server problem. Please try again later.', err);\n    }\n}\n\nexport const deviceOn = (payload) => dispatch => {\n    dispatch({\n        type: DEVICE_ON,\n        payload\n    });\n}\n","import React, { Component } from 'react';\nimport Wrapper from '../../hoc/Wrapper/Wrapper';\nimport SerialNumber from '../../presentation/SerialNumber/SerialNumber';\nimport Screen from '../Screen/Screen';\nimport './Panel.scss';\nimport Keypad from '../Keypad/Keypad';\nimport { connect } from 'react-redux';\n\nexport class Panel extends Component {\n    render() {\n        return (\n            <Wrapper componentName=\"Panel\">\n                <Screen />\n                <Keypad />\n                <SerialNumber sn={this.props.serialNumber} />\n            </Wrapper>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    serialNumber: state.safe.serialNumber\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Panel);\n","import React from 'react';\nimport './App.scss';\nimport Wrapper from './hoc/Wrapper/Wrapper';\nimport { Provider } from 'react-redux';\nimport store from './store/configureStore';\nimport Panel from './containers/Panel/Panel';\n\nconst App = () => {\n  return (\n    <Provider store={ store }>\n      <Wrapper componentName=\"App\">\n        <Panel />\n      </Wrapper>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}